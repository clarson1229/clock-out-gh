{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","_useState","useState","_useState2","Object","slicedToArray","outString","setOutString","_useState3","_useState4","hidden","setHidden","_useState5","hours","timeInHours","timeInMins","timeOfDay","goalHours","_useState6","values","setValues","handleInputChange","e","_e$target","target","name","value","objectSpread","defineProperty","react_default","a","createElement","onSubmit","event","preventDefault","tempTimeOfDay","timeLeft","parseInt","outMin","outHour","className","type","onChange","App","Components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00e913b2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form() {\n  const [outString, setOutString] = useState(\"\");\n  const [hidden, setHidden] = useState(true);\n  const [values, setValues] = useState({\n    hours: \"\",\n    timeInHours: \"\",\n    timeInMins: \"\", \n    timeOfDay: \"AM\",\n    goalHours: \"40\"\n  });\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    var tempTimeOfDay = values.timeOfDay;\n    const temp = values.goalHours - values.hours;\n    const timeLeft = temp * 60 + parseInt(values.timeInMins, 10);\n    const outMin = timeLeft % 60;\n    var outHour = parseInt(timeLeft / 60, 10) + parseInt(values.timeInHours, 10);\n    while (outHour > 12){\n      outHour = outHour - 12;\n      if (tempTimeOfDay === \"AM\"){\n        tempTimeOfDay = \"PM\"\n      }else {\n        tempTimeOfDay = \"AM\"\n      }\n    }\n    if (outMin < 10) {\n      const result = outHour + \":0\" + outMin +\" \"+ tempTimeOfDay;\n      setOutString(result);\n    } else {\n      const result = outHour + \":\" + outMin +\" \"+tempTimeOfDay;\n      setOutString(result);\n    }\n    setHidden(false);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className='top'>\n        Goal Hours:\n        <input\n          className='goalHoursInput paddingleftRight'\n          name=\"goalHours\"\n          type=\"text\"\n          value={values.goalHours}\n          onChange={handleInputChange}\n        />\n      </label>\n\n      <label>\n        Hours:\n        <input\n          className='paddingleftRight'\n          name=\"hours\"\n          type=\"text\"\n          value={values.hours}\n          onChange={handleInputChange}\n        />\n      </label>\n\n      <label className='bottom'>\n        <br />\n        <br />\n        Time in =\n        <input\n          className='timeInput paddingleftRight'\n          name=\"timeInHours\"\n          type=\"text\"\n          value={values.timeInHours}\n          onChange={handleInputChange}\n        />\n        :\n        <input\n          className='timeInput paddingleftRight'\n          name=\"timeInMins\"\n          type=\"text\"\n          value={values.timeInMins}\n          onChange={handleInputChange}\n        />\n        <select \n          className='paddingleftRight'\n          name='timeOfDay' \n          onChange={handleInputChange} \n          value={values.timeOfDay}\n        >\n          <option value='AM'>AM</option>\n          <option value='PM'>PM</option>\n        </select>\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n\n      <div className=\"output\" hidden={hidden}>\n        <h2>Clock out Time </h2>\n        <div name=\"outString\">{outString}</div>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./app.css\";\nimport Form from \"./Components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='HeaderStuff'>\n        <h1>When should I clock out </h1>\n        <h2>Input: Hours worked and Clock in time. </h2>\n      </div>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}